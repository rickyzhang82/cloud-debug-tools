#!/bin/bash

#Check kubectl client exists
if ! command -v kubectl &> /dev/null
then
    printf "Kubectl client could not be found. Please install Kubectl client before running kubectl-exec.\nRefer to: https://kubernetes.io/docs/tasks/tools/\n\n"
    exit 1
fi

#Check client major/minor versions
kubectl_major_version=$(kubectl version --client -o yaml | grep -i "major" | awk '{ print $2 }' | sed 's/"//g')
kubectl_minor_version=$(kubectl version --client -o yaml | grep -i "minor" | awk '{ print $2 }' | sed 's/"//g')

if [[ $kubectl_major_version -gt 1 ]] || [[ $kubectl_major_version -eq 1 && $kubectl_minor_version -ge 18 ]]
then
        use_generator=false
        echo "Kuberetes client version is $kubectl_major_version.$kubectl_minor_version. Generator will not be used since it is deprecated."
elif [[ $kubectl_major_version -eq 1 && $kubectl_minor_version -lt 18 ]]
then
        use_generator=true
        echo "Kuberetes client version is $kubectl_major_version.$kubectl_minor_version. Generator will be used."
else
        echo "Invalid kubectl version, exiting."
        exit 1
fi

#Usage message
usage()
{
        echo 'Interactive:'
        echo '$ kubectl-exec'
        echo " "
        echo 'Non-Interactive'
        echo '$ kubectl-exec NODE'
        echo " "
        echo "Note: root volume of the node is mounted on /"
        echo " "
        exit 0
}

#windows function to ssh to linux nodes
LINUXNODES () {

    IMAGE="alpine"
    POD="$NODE-exec-$(env LC_CTYPE=C tr -dc a-z0-9 < /dev/urandom | head -c 6)"

    # Check the node existance
    kubectl get node "$NODE" >/dev/null || exit 1

    #nsenter JSON overrrides
    OVERRIDES="$(cat <<EOT
{
  "spec": {
    "nodeName": "$NODE",
    "hostPID": true,
    "nodeSelector": {
      "kubernetes.io/os": "linux"
    },
    "containers": [
      {
        "securityContext": {
          "privileged": true,
          "capabilities": {
            "add": [
              "SYS_PTRACE"
            ]
          }
        },
        "image": "$IMAGE",
        "name": "nsenter",
        "stdin": true,
        "stdinOnce": true,
        "tty": true,
        "command": [ "nsenter", "--target", "1", "--mount", "--uts", "--ipc", "--net", "--pid", "--", "bash", "-l" ]
      }
    ]  
  }
}
EOT
)"

echo "creating pod \"$POD\" on node \"$NODE\""
if [ $use_generator = true ]
then
        kubectl run --rm --image $IMAGE --overrides="$OVERRIDES" --generator=run-pod/v1 -ti "$POD"
else
        kubectl run --rm --image $IMAGE --overrides="$OVERRIDES" -ti "$POD"
fi
}


#check if user is looking for focumentation with -h
if [ "$1" = "-h" ]
then
        usage
        exit 0
fi

#Check user input for shell access
if [ -z "$1" ]; then
        declare -a nodenumber
        readarray -t nodenumber < <( kubectl get nodes --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}' )

        for i in "${!nodenumber[@]}"; do
          printf "$i ${nodenumber[i]} \n"
        done
        
        read -p "Enter the node number: " NODE_INDEX
        NODE=${nodenumber[NODE_INDEX]}

else
        NODE=$1
fi

echo "Entering K8S node: $NODE ..."
LINUXNODES
